- name: Provision image
  hosts: default
  tasks:
    - name: Upgrade packages
      ansible.builtin.dnf:
        name: '*'
        state: latest
        allowerasing: yes

    - name: Disable firstboot
      lineinfile:
        path: /etc/sysconfig/firstboot
        regexp: '^RUN_FIRSTBOOT='
        line: 'RUN_FIRSTBOOT=NO'
        create: true
        owner: root
        group: root
        mode: '0644'

    - name: Install cloud-init
      package:
        name:
          - cloud-init
          - cloud-utils-growpart
          - dracut-config-generic

    - name: Enable cloud-init services
      service:
        name: "{{ item }}"
        enabled: true
      with_items:
        - cloud-config
        - cloud-init
        - cloud-init-local
        - cloud-final

    - name: Remove firewall and linux-firmware
      package:
        name:
          - firewalld
          - firewalld-filesystem
          - ipset
          - ipset-libs
          - iptables
          - python3-firewall
          - python3-slip
          - libnftnl
          - libnfnetlink
          - linux-firmware
        state: absent

    - name: Install additional software
      package:
        name:
          - cockpit-system
          - cockpit-ws
          - dnf-utils
          - gdisk
          - nfs-utils
          - qemu-guest-agent
          - rsync
          - tar
          - tuned
          - tcpdump

    - name: Regenerate the initramfs
      command: dracut -f --regenerate-all

    - name: Disable root login
      user:
        name: root
        password: '!!'

    - name: Delete DNF cache
      command: dnf clean all

    - name: Find temporary files
      find:
        file_type: any
        paths:
          - /tmp
          - /var/tmp
          - /var/cache
        patterns: '*'
      register: tmp_files

    - name: Remove temporary files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ tmp_files.files }}"

    - name: Find SSH host keys
      find:
        paths: /etc/ssh
        patterns: 'host*key'
      register: host_keys

    - name: Remove SSH host keys
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ host_keys.files }}"

    - name: Remove kickstart files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /root/anaconda-ks.cfg
        - /root/original-ks.cfg

    - name: Truncate files
      command: "truncate -s 0 {{ item }}"
      loop:
        - /etc/machine-id
        - /etc/resolv.conf
        - /var/log/audit/audit.log
        - /var/log/wtmp
        - /var/log/lastlog
        - /var/log/btmp
        - /var/log/cron
        - /var/log/maillog
        - /var/log/messages
        - /var/log/secure
        - /var/log/spooler

    - name: Remove log folders
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/log/anaconda
        - /var/log/qemu-ga
        - /var/log/tuned
        - /var/lib/cloud

    - name: Find log files.
      find:
        paths:
          - /var/log
          - /var/log/sssd
        patterns: 'log,.old,*.log.gz,*.[0-9],*.gz,*-????????'
      register: log_files

    - name: Remove log files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ log_files.files }}"

    - name: Remove random-seed
      file:
        path: /var/lib/systemd/random-seed
        state: absent

    - name: Disable root SSH login via password
      file:
        path: /etc/ssh/sshd_config.d/01-permitrootlogin.conf
        state: absent
      when: ansible_facts['distribution_major_version'] == '9'

    - name: Fill free space with zeroes
      shell: dd if=/dev/zero of=/zeroed_file bs=1M oflag=direct || rm -f /zeroed_file

    - name: Detect swap partition
      command: grep -oP '^/dev/[\w-]+' /proc/swaps
      register: swaps
      ignore_errors: true

    - name: Wipe out swap data
      block:
        - name: Get swap partition UUID
          command: "blkid {{ swaps.stdout }} -s UUID -o value"
          register: swap_blkid

        - name: Unmount swap partition
          command: "swapoff {{ swaps.stdout }}"

        - name: Fill swap partition with zeroes
          shell: "dd if=/dev/zero of={{ swaps.stdout }} bs=1M oflag=direct || /bin/true"

        - name: Format swap partition
          command: "mkswap -U {{ swap_blkid.stdout }} -f {{ swaps.stdout }}"

        - name: Mount swap partition
          command: "swapon {{ swaps.stdout }}"
      when: swaps.rc == 0

    - name: Sync disc
      command: sync

    - name: Clear shell history
      shell: history -c